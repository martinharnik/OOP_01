# Data: Attributes that hold information about the state of an object.
# Function: Methods that define the behavior of an object and can manipulate its data.
# Class: A blueprint for creating instances of that class.
# __init__ method: A constructor that initializes the object's attributes.
# dunder __init__ method: A special method in Python classes, also known as a constructor, that is automatically called when a new instance of the class is created. It initializes the object's attributes.
# Class variables: Variables that are shared among all instances of a class.
# Class methods: Methods that are bound to the class and not the instance. They can modify class state that applies across all instances of the class.
# Static methods: Methods that are bound to the class and not the instance. They do not modify class or instance state and are used for utility functions.

# Inheritance: A mechanism where a new class inherits attributes and methods from an existing class.
# isinstance: A function that checks if an object is an instance of a class or a tuple of classes.
# issubclass: A function that checks if a class is a subclass of another class or a tuple of classes.

# dunder __repr__ method: A special method in Python classes that returns a string representation of the object, which is useful for debugging. (__repr__ stands for "representation")
# dunder __str__ method: A special method in Python classes that returns a string representation of the object, which is useful for end users. (__str__ stands for "string")
# dunder: A shorthand for "double underscore," referring to methods or attributes with double underscores before and after their names (e.g., __init__, __repr__).

# Decorators: A design pattern in Python that allows a user to add new functionality to an existing object without modifying its structure. They are usually defined as functions that return a wrapper function.
# Property decorator: A built-in decorator in Python that is used to define getter, setter, and deleter methods in a class. It allows for controlled access and modification of private attributes.
# Getter: A method that gets the value of a specific attribute. It allows for controlled access to the attribute's value.
# Setter: A method that sets the value of a specific attribute. It allows for controlled modification of the attribute's value, often including validation or other logic.
# Deleter: A method that deletes a specific attribute.

class ExampleClass:
    # Data
    def __init__(self):
        self.data_member = 0

    # Function
    def example_method(self):
        # Method implementation
        pass

    def __repr__(self):
        return f"ExampleClass(data_member={self.data_member})"

    def __str__(self):
        return f"ExampleClass with data_member = {self.data_member}"
